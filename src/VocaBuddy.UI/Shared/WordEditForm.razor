@using Blazored.FluentValidation
@using VocaBuddy.Shared.Interfaces

<EditForm Model="Model" OnValidSubmit="OnValidSubmit" class="mt-3">
    <FluentValidationValidator />

    <div class="row">
        <div class="col-md-6">
            <div class="form-group mb-3">
                <label for="wordText">Word in your native language</label>
                <InputText id="wordText" class="form-control" @bind-Value="Model.Text" required autocomplete="off" spellcheck="false" />
                <ValidationMessage For="() => Model.Text"></ValidationMessage>
            </div>
        </div>
    </div>

    <label>Translations</label>
    @for (var i = 0; i < Model.Translations.Count; i++)
    {
        var index = i;
        <div class="row">
            <div class="col-md-6 mb-1">
                <div class="input-group mb-2">
                    <InputText class="form-control" @bind-Value="Model.Translations[index].Text" required autocomplete="off" spellcheck="false" />
                    @if (index != 0)
                    {
                        <button class="btn btn-danger input-group-append" @onclick="() => RemoveTranslation(index)">
                            <span class="oi oi-delete"></span>
                        </button>
                    }
                </div>
                <ValidationMessage For="@(() => Model.Translations[index].Text)" />
            </div>
        </div>
    }

    <div class="mb-3">
        <button type="button" class="btn btn-primary btn-sm" @onclick="AddTranslation">+</button>
    </div>

    <div class="row">
        <div class="col-md-6 d-flex justify-content-end">
            <button type="submit" class="btn btn-success me-2">Save</button>
            <a class="btn btn-secondary" href="/words">Cancel</a>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public INativeWord Model { get; set; } = default!;
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<int> OnRemoveTranslation { get; set; }
    [Parameter] public EventCallback OnAddTranslation { get; set; }

    private Task RemoveTranslation(int index) => OnRemoveTranslation.InvokeAsync(index);
    private Task AddTranslation() => OnAddTranslation.InvokeAsync();
}